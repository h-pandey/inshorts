version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: news_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: news_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - news_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: news_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - news_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.simple-app
    container_name: news_api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      MONGODB_URL: mongodb://admin:password123@mongodb:27017/news_db?authSource=admin
      MONGODB_DATABASE: news_db
      MONGODB_COLLECTION: articles
      
      # Redis Configuration
      REDIS_URL: redis://:redis123@redis:6379
      REDIS_DB: 0
      
      # Application Configuration
      APP_NAME: Contextual News API
      APP_VERSION: 1.0.0
      DEBUG: "False"
      LOG_LEVEL: INFO
      
      # API Configuration
      API_V1_PREFIX: /api/v1
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:8080", "http://localhost:8000"]'
      
      # Performance Configuration
      MAX_CONNECTIONS: 100
      CONNECTION_TIMEOUT: 30
      REQUEST_TIMEOUT: 60
      
      # Cache Configuration
      CACHE_TTL: 3600
      TRENDING_CACHE_TTL: 900
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 100
      RATE_LIMIT_BURST: 20
      
      # Geospatial Configuration
      DEFAULT_RADIUS_KM: 10.0
      MAX_RADIUS_KM: 100.0
      GRID_SIZE_KM: 5.0
      
      # Trending Configuration
      TRENDING_UPDATE_INTERVAL: 900
      TRENDING_DECAY_FACTOR: 0.1
      TRENDING_INTERACTION_WEIGHT: 1.0
      TRENDING_RECENCY_WEIGHT: 0.5
      TRENDING_LOCATION_WEIGHT: 0.3
      
      # OpenAI Configuration (set your API key)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      OPENAI_MODEL: gpt-3.5-turbo
      OPENAI_MAX_TOKENS: 500
    volumes:
      - ./news_data.json:/app/news_data.json:ro
      - ./logs:/app/logs
      - ./app:/app/app
      - ./scripts:/app/scripts
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB Express (Database Admin UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: news_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - news_network

  # Redis Commander (Redis Admin UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: news_redis_commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - news_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: news_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - news_network
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  news_network:
    driver: bridge
